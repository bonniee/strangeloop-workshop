{
  "name": "React Native Workshop",
  "tagline": "by @brindelle",
  "body": "# Welcome!\r\n\r\nHey! If you're reading this, you've probably signed up for my workshop at Strangeloop. Nice. You **don't** need to clone this repository for the workshop; just follow the instructions below.\r\n\r\n# Setup\r\n\r\nFollow the setup instructions from the [official docs](https://facebook.github.io/react-native/releases/next/docs/getting-started.html).\r\n\r\nCheck if your setup is working by running by generating a new project:\r\n\r\n```\r\nreact-native init Weather\r\n```\r\n\r\nThen, build & run the iOS and/or Android applications.\r\n\r\n- For iOS, you can open `ios/Weather.xcodeproj` in Xcode in order to build it and launch the simulator.\r\n- For Android, you should first launch an Android emulator from `android avd`, then build and run your application using `react-native run-android`.\r\n\r\n# Part 1: Components + Styling\r\n\r\n## Mondrian\r\n\r\nLet's start with some styling practice! Here's a screenshot of what the Mondrian app should end up looking like:\r\n\r\n<img src=\"part1/mondrian.png\" width=\"250px\"/>\r\n\r\nUsing flexbox and `<View>` components, try and replicate this in your own application.\r\n\r\n## Weather app: mockup edition\r\n\r\nNext, we're going to focus now on using some basic mobile components from React Native: `<View>`, `<Text>`, `<Image>`, and `<TextInput>`. Here's what my version of the Weather app looks like:\r\n\r\n<img src=\"part1/weather-mock.png\" width=\"250px\"/>\r\n\r\nYou'll notice the following attributes:\r\n\r\n- Background image\r\n- Current temperature\r\n- Description of current weather\r\n- Location\r\n\r\nTry and replicate this in your app, using the above components, as well as appropriate styles. Refer to the docs as necessary.\r\n\r\n# Part 2: Interactivity + Platform APIs\r\n\r\n## Developer tools\r\n\r\nIn this exercise you'll also want to make use of the developer tools. Try the following:\r\n\r\n- Open the developer menu from your emulator (iOS or Android)\r\n- Turn on auto reload and try making some style changes - see what happens!\r\n- Add a `debugger` statement and open the Chrome developer tools\r\n- Add a `console.log` statement and view the logged message in the Chrome developer tools (check out the [docs](https://facebook.github.io/react-native/docs/debugging.html) for more ways to view log statements, e.g. `adb logcat` or from Xcode)\r\n\r\n## Touch events\r\n\r\n- Make the TextInput interactive! Update the displayed zip code when the user enters text.\r\n\r\n## Fetch\r\n\r\n- Use the OpenWeatherMaps API to fetch the weather forecast & update the displayed text accordingly\r\n\r\n## Local storage\r\n\r\n- When the user inputs a new zip code, save it to local storage\r\n- When the app starts, load the previous location from local storage, if available\r\n\r\n# Part 3: Cross-platform and Platform-Specific Code\r\n\r\n## iOS- and Android-specific code\r\n\r\n- Make a component that renders differently on iOS and Android (different background colors, perhaps?)\r\n- Using the [CutePhotos example](https://github.com/bonniee/strangeloop-workshop/tree/master/part3/CutePhotos) as a guide, implement multiple screens in the Weather app, using the appropriate components for iOS and Android, respectively\r\n\r\n## Update the weather app\r\n\r\n- Update your app to make the multiple screens actually useful! Display weather forecasts for the previous 5 locations\r\n\r\n# Bonus exercises\r\n\r\n- Use the geolocation API to display weather based on the user's current location\r\n- Provide settings to toggle between Fahrenheit and Celsius\r\n- Add some animations\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}